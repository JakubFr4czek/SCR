package garage
public
	
	with Data_Model;
	with Base_Types;
	
	-- Custom data types --
	
	data EngineState
		properties
			Data_Model::Enumerators => ("running", "idle");
			Data_Model::Base_Type => (classifier (Base_Types::Integer));
			Data_Size => 4 Bytes;
	end EngineState;
			
	data EngineAction
		properties
			Data_Model::Enumerators => ("up", "down", "stop");
			Data_Model::Base_Type => (classifier (Base_Types::Integer));
			Data_Size => 4 Bytes;
	end EngineAction;
			
	-- System --
	system garade_door_system		
	end garade_door_system;
	
	system implementation garade_door_system.impl
			subcomponents
				-- gate devices --
				engine: device engine_device;
				limit_switch_top: device limit_switch_device;
				limit_switch_bottom: device limit_switch_device;
				gate_usb_int: device usb_interface_device;
				
				-- terminal devices --
				terminal_button_up: device button_device;
				terminal_button_down: device button_device;
				lcd_display: device lcd_display_device;
				radio_receiver: device radio_receiver;
				terminal_usb_int: device usb_interface_device;

				-- remote controller devices --
				remote_controller_button_up: device button_device;
				remote_controller_button_down: device button_device;
				radio_transmitter: device radio_transmitter;
		        
		        -- processes --
		        gate_process: process gate_process.impl;
		        terminal_process: process terminal_process.impl;
		        remote_controller_process: process remote_controller_process.impl;
		        
		        -- cpus --
		        gate_cpu: processor cpu.impl;
		        terminal_cpu: processor cpu.impl;
		        remote_controller_cpu: processor cpu.impl;
		        
		        -- memory -- 
		        ram: memory ram.impl;

		        -- buses --
		        radio: bus radio.impl;
		        usb_bus: bus usb_bus.impl;
		     
		        gate_data_bus: bus data_bus.impl;
		        terminal_data_bus: bus data_bus.impl;
		        remote_controller_data_bus: bus data_bus.impl;
		        

		connections

			-- gate process --
			c1: port gate_process.engine_command -> engine.engine_action;
			c2: port engine.engine_state -> gate_process.engine_state;
			c3: port limit_switch_top.status -> gate_process.limit_switch_top_state;
			c4: port limit_switch_bottom.status -> gate_process.limit_switch_bottom_state;
			
			-- terminal process --
			c5: port terminal_button_up.status -> terminal_process.button_up_status;
			c6: port terminal_button_down.status -> terminal_process.button_down_status;
			
			c8a: port engine.engine_state -> gate_usb_int.EngineState_in;
			c8b: port gate_usb_int.EngineState_usb_out -> terminal_usb_int.EngineState_usb_in;
			c8c: port terminal_usb_int.EngineState_out -> terminal_process.engine_state;
			
			c9: port terminal_process.lcd_status -> lcd_display.status;
			
			c10a: port terminal_process.engine_action -> terminal_usb_int.EngineAction_in;
			c10b: port terminal_usb_int.EngineAction_usb_out -> gate_usb_int.EngineAction_usb_in;
			c10c: port gate_usb_int.EngineAction_out -> gate_process.terminal_command;
			
			-- remote controller
			c11: port remote_controller_button_up.status -> remote_controller_process.button_up_status;
			c12: port remote_controller_button_down.status -> remote_controller_process.button_down_status;
			
			-- radio communication
			c13: port remote_controller_process.radio_dispatch -> radio_transmitter.data_in;
			c14: port radio_transmitter.radio_dispatch -> radio_receiver.radio_receive;
			c15: port radio_receiver.data_out -> terminal_process.radio_receive;
			
			-- bus connections --
			c16: bus access radio <-> radio_receiver.radio_access;
			c17: bus access radio <-> radio_transmitter.radio_access;
			
			c18: bus access gate_data_bus <-> engine.data_access;
			c19: bus access gate_data_bus <-> limit_switch_top.data_access;
			c20: bus access gate_data_bus <-> limit_switch_bottom.data_access;
			c21: bus access terminal_data_bus <-> terminal_button_up.data_access;
			c22: bus access terminal_data_bus <-> terminal_button_down.data_access;
			c23: bus access terminal_data_bus <-> lcd_display.data_access;
			c24: bus access terminal_data_bus <-> radio_receiver.data_access;
			c25: bus access remote_controller_data_bus <-> remote_controller_button_up.data_access;
			c26: bus access remote_controller_data_bus <-> remote_controller_button_down.data_access;
			c27: bus access remote_controller_data_bus <-> radio_transmitter.data_access;
			c28: bus access gate_data_bus <-> gate_cpu.data_access;
			c29: bus access terminal_data_bus <-> terminal_cpu.data_access;
			c30: bus access remote_controller_data_bus <-> remote_controller_cpu.data_access;
			c31: bus access terminal_data_bus <-> terminal_usb_int.data_access;
			c32: bus access gate_data_bus <-> gate_usb_int.data_access;
			c33: bus access usb_bus <-> terminal_usb_int.usb_access;
			c34: bus access usb_bus <-> gate_usb_int.usb_access;

		properties
			-- cpu bindings --
			Actual_Processor_Binding => (reference (gate_cpu)) applies to gate_process;
			Actual_Processor_Binding => (reference (gate_cpu)) applies to gate_process.engine_control_thread;
			Actual_Processor_Binding => (reference (gate_cpu)) applies to engine;
			Actual_Processor_Binding => (reference (gate_cpu)) applies to limit_switch_top;
			Actual_Processor_Binding => (reference (gate_cpu)) applies to limit_switch_bottom;
			Actual_Processor_Binding => (reference (gate_cpu)) applies to gate_usb_int;
			
			Actual_Processor_Binding => (reference (terminal_cpu)) applies to terminal_process;
			Actual_Processor_Binding => (reference (terminal_cpu)) applies to terminal_process.terminal_control_thread;
			Actual_Processor_Binding => (reference (terminal_cpu)) applies to terminal_button_up;
			Actual_Processor_Binding => (reference (terminal_cpu)) applies to terminal_button_down;
			Actual_Processor_Binding => (reference (terminal_cpu)) applies to lcd_display;
			Actual_Processor_Binding => (reference (terminal_cpu)) applies to radio_receiver;
			Actual_Processor_Binding => (reference (terminal_cpu)) applies to terminal_usb_int;
			
			Actual_Processor_Binding => (reference (remote_controller_cpu)) applies to remote_controller_process;
			Actual_Processor_Binding => (reference (remote_controller_cpu)) applies to remote_controller_process.remote_controller_thread;
			Actual_Processor_Binding => (reference (remote_controller_cpu)) applies to remote_controller_button_up;
			Actual_Processor_Binding => (reference (remote_controller_cpu)) applies to remote_controller_button_down;
			Actual_Processor_Binding => (reference (remote_controller_cpu)) applies to radio_transmitter;

			-- ram bindings --
			Actual_Memory_Binding => (reference(ram)) applies to gate_cpu;
			Actual_Memory_Binding => (reference(ram)) applies to terminal_cpu;
			Actual_Memory_Binding => (reference(ram)) applies to remote_controller_cpu;
			
			---- connection bindings ----
			
			Actual_Connection_Binding => (reference (radio)) applies to c14;
			
			Actual_Connection_Binding => (reference (gate_data_bus)) applies to c1;
			Actual_Connection_Binding => (reference (gate_data_bus)) applies to c2;
			Actual_Connection_Binding => (reference (gate_data_bus)) applies to c3;
			Actual_Connection_Binding => (reference (gate_data_bus)) applies to c4;
			Actual_Connection_Binding => (reference (terminal_data_bus)) applies to c5;
			Actual_Connection_Binding => (reference (terminal_data_bus)) applies to c6;
			
			Actual_Connection_Binding => (reference (gate_data_bus)) applies to c8a;
			Actual_Connection_Binding => (reference (usb_bus)) applies to c8b;
			Actual_Connection_Binding => (reference (terminal_data_bus)) applies to c8c;
			
			Actual_Connection_Binding => (reference (terminal_data_bus)) applies to c9;
			
			Actual_Connection_Binding => (reference (terminal_data_bus)) applies to c10a;
			Actual_Connection_Binding => (reference (usb_bus)) applies to c10b;
			Actual_Connection_Binding => (reference (gate_data_bus)) applies to c10c;
			
			Actual_Connection_Binding => (reference (remote_controller_data_bus)) applies to c11;
			Actual_Connection_Binding => (reference (remote_controller_data_bus)) applies to c12;
			Actual_Connection_Binding => (reference (remote_controller_data_bus)) applies to c13;
			Actual_Connection_Binding => (reference (terminal_data_bus)) applies to c15;
			
			
			-- processes connection bindings --
			Actual_Connection_Binding => (reference (gate_data_bus)) applies to gate_process.c1;
			Actual_Connection_Binding => (reference (gate_data_bus)) applies to gate_process.c2;
			Actual_Connection_Binding => (reference (gate_data_bus)) applies to gate_process.c3;
			Actual_Connection_Binding => (reference (gate_data_bus)) applies to gate_process.c4;
			Actual_Connection_Binding => (reference (gate_data_bus)) applies to gate_process.c5;
			
			Actual_Connection_Binding => (reference (terminal_data_bus)) applies to terminal_process.c1;
			Actual_Connection_Binding => (reference (terminal_data_bus)) applies to terminal_process.c2;
			Actual_Connection_Binding => (reference (terminal_data_bus)) applies to terminal_process.c3;
			Actual_Connection_Binding => (reference (terminal_data_bus)) applies to terminal_process.c4;
			Actual_Connection_Binding => (reference (terminal_data_bus)) applies to terminal_process.c5;
			Actual_Connection_Binding => (reference (terminal_data_bus)) applies to terminal_process.c6;
			
			Actual_Connection_Binding => (reference (remote_controller_data_bus)) applies to remote_controller_process.c1;
			Actual_Connection_Binding => (reference (remote_controller_data_bus)) applies to remote_controller_process.c2;
			Actual_Connection_Binding => (reference (remote_controller_data_bus)) applies to remote_controller_process.c3;
	

	end garade_door_system.impl;
	
	-- Gate process --
			
	process gate_process
		features
			limit_switch_top_state: in data port Base_Types::Boolean; -- top limit switch status
			limit_switch_bottom_state: in data port Base_Types::Boolean; -- bottom limit switch status
			engine_state: in data port EngineState; -- engine state read from engine
			terminal_command: in data port EngineAction;
			
			engine_command: out data port EngineAction; -- command to the engine, calculated based on limit switches status, engine state and terminal command
	end gate_process;
	
	process implementation gate_process.impl
	    subcomponents
	    	engine_control_thread: thread engine_control_thread.impl;
		connections
			c1: port limit_switch_top_state -> engine_control_thread.limit_switch_top_state;
			c2: port limit_switch_bottom_state -> engine_control_thread.limit_switch_bottom_state;
			c3: port engine_state -> engine_control_thread.engine_state;
			c4: port terminal_command -> engine_control_thread.terminal_command;
			c5: port engine_control_thread.engine_command -> engine_command;

	end gate_process.impl;
			
	-- Gate threads --
	
	thread engine_control_thread
		features
			limit_switch_top_state: in data port Base_Types::Boolean;
			limit_switch_bottom_state: in data port Base_Types::Boolean;
			engine_state: in data port EngineState;
			terminal_command: in data port EngineAction;
			engine_command: out data port EngineAction;
	end engine_control_thread;
	
	thread implementation engine_control_thread.impl	
	end engine_control_thread.impl;
	
	-- Gate devices --
			
	device usb_interface_device
		features
			-- data over data_bus --
			EngineAction_in: in data port EngineAction;
			EngineAction_out: out data port EngineAction;
			
			EngineState_in: in data port EngineState;
			EngineState_out: out data port EngineState;
			
			-- data over usb_bus --
			EngineAction_usb_in: in data port EngineAction;
			EngineAction_usb_out: out data port EngineAction;
			EngineState_usb_in: in data port EngineState;
			EngineState_usb_out: out data port EngineState;
			
			data_access: requires bus access data_bus;
			usb_access: requires bus access usb_bus;
	end usb_interface_device;

	device implementation usb_interface_device.impl
	end usb_interface_device.impl;
			
	device engine_device
		features
			engine_action: in data port EngineAction;
			engine_state: out data port EngineState;
			data_access: requires bus access data_bus;
		properties
			Period => 20ms;
			Dispatch_Protocol => Periodic;
	end engine_device;
	
	device implementation engine_device.impl
	end engine_device.impl;
	
	device limit_switch_device
		features
			status: out data port Base_Types::Boolean; -- true -> active, false -> inactive
			data_access: requires bus access data_bus;
		properties
			Period => 20ms;
			Dispatch_Protocol => Periodic;
	end limit_switch_device;
	
	device implementation limit_switch_device.impl
	end limit_switch_device.impl;
	
	-- Terminal process --
	
	process terminal_process
		features
			button_up_status: in data port Base_Types::Boolean;
			button_down_status: in data port Base_Types::Boolean;
			radio_receive: in data port EngineAction;
			engine_state: in data port EngineState;
			
			engine_action: out data port EngineAction;
			lcd_status: out data port EngineState;
	end terminal_process;
	
	process implementation terminal_process.impl
		subcomponents
			terminal_control_thread: thread terminal_control_thread.impl;
		connections
			c1: port button_up_status -> terminal_control_thread.button_up_status;
			c2: port button_down_status -> terminal_control_thread.button_down_status;
			c3: port radio_receive -> terminal_control_thread.radio_receive;
			c4: port engine_state -> terminal_control_thread.engine_state;
			
			c5: port terminal_control_thread.engine_action -> engine_action;
			c6: port terminal_control_thread.lcd_status -> lcd_status;
	end terminal_process.impl;
	
	-- Terminal threads --
	
	thread terminal_control_thread
		features
			button_up_status: in data port Base_Types::Boolean;
			button_down_status: in data port Base_Types::Boolean;
			engine_state: in data port EngineState;
			radio_receive: in data port EngineAction;
			
			lcd_status: out data port EngineState;
			engine_action: out data port EngineAction;
			
		properties 
			Period => 20ms;
			Dispatch_Protocol => Periodic;
	end terminal_control_thread;
	
	thread implementation terminal_control_thread.impl
	end terminal_control_thread.impl;	
	
	-- Terminal devices --
	
	device button_device
		features
			status: out data port Base_Types::Boolean;
			data_access: requires bus access data_bus;
		properties
			Period => 20ms;
			Dispatch_Protocol => Periodic;	
	end button_device;
	
	device implementation button_device.impl
	end button_device.impl;
	
	device lcd_display_device
		features
			status: in data port EngineState; 
			data_access: requires bus access data_bus;
		properties 
			Period => 20ms;
			Dispatch_Protocol => Periodic;	
	end lcd_display_device;
	
	device implementation lcd_display_device.impl
	end lcd_display_device.impl;
	
		device radio_receiver
		features
			radio_receive: in data port EngineAction;
			data_out: out data port EngineAction;
			radio_access: requires bus access radio;
			data_access: requires bus access data_bus;
	end radio_receiver;
	
	device implementation radio_receiver.impl
	end radio_receiver.impl;
	
	-- Remote process -- 
	
	process remote_controller_process
		features
			button_up_status: in data port Base_Types::Boolean;
			button_down_status: in data port Base_Types::Boolean;
			
			radio_dispatch: out data port EngineAction;
	end remote_controller_process;

	process implementation remote_controller_process.impl
		subcomponents
			remote_controller_thread: thread remote_controller_thread.impl;
		connections
			c1: port button_up_status -> remote_controller_thread.button_up_status;
			c2: port button_down_status -> remote_controller_thread.button_down_status;
			
			-- data over radio --
			c3: port remote_controller_thread.radio_dispatch -> radio_dispatch;
			
	end remote_controller_process.impl;
	
	-- Remote threads -- 
	
	thread remote_controller_thread
		features
			button_up_status: in data port Base_Types::Boolean;
			button_down_status: in data port Base_Types::Boolean;
			
			-- data over radio --
			radio_dispatch: out data port EngineAction;
		properties 
			Period => 20ms;
			Dispatch_Protocol => Periodic;
	end remote_controller_thread;
	
	thread implementation remote_controller_thread.impl	
	end remote_controller_thread.impl;
	
	-- Remote devices -- 
	
	device radio_transmitter
		features
			data_in: in data port EngineAction;
			radio_dispatch: out data port EngineAction;
			radio_access: requires bus access radio;
			data_access: requires bus access data_bus;
	end radio_transmitter;
	
	device implementation radio_transmitter.impl
	end radio_transmitter.impl;
	
	-- processor --
	
	processor cpu
		features
			data_access: requires bus access data_bus;
	end cpu;
	
	processor implementation cpu.impl
	end cpu.impl;
	
	-- ram --
	
	memory ram
	end ram;
	
	memory implementation ram.impl
	end ram.impl;
	
	-- radio bus --
	
	bus radio
	end radio;
	
	bus implementation radio.impl
	end radio.impl;
	
	-- data bus --
	bus data_bus	
	end data_bus;
	
	bus implementation data_bus.impl	
	end data_bus.impl;
	
	-- usb bus --
	
	bus usb_bus	
	end usb_bus;
	
	bus implementation usb_bus.impl
	end usb_bus.impl;	
	
end garage;