package garage
public
	
	with Data_Model;
	with Base_Types;
	
	-- Custom data types --
	
	data EngineState
		properties
			Data_Model::Enumerators => ("running", "idle");
			Data_Model::Base_Type => (classifier (Base_Types::Integer));
			Data_Size => 4 Bytes;
	end EngineState;
			
	data EngineAction
		properties
			Data_Model::Enumerators => ("up", "down", "stop");
			Data_Model::Base_Type => (classifier (Base_Types::Integer));
			Data_Size => 4 Bytes;
	end EngineAction;
			
	-- System --
	system garade_door_system		
	end garade_door_system;
	
	system implementation garade_door_system.impl
			subcomponents
				-- gate devices --
				engine: device engine_device;
				engine_controller: device engine_controller_device;
				limit_switch_top: device limit_switch_device;
				limit_switch_bottom: device limit_switch_device;
				
				-- terminal devices --
				terminal_button_up: device button_device;
				terminal_button_down: device button_device;
				lcd_display: device lcd_display_device;
				terminal_controller: device terminal_controller_device;
				
				
				-- remote controller devices --
				remote_controller: device remote_controller_device;
				remote_controller_button_up: device button_device;
				remote_controller_button_down: device button_device;
		        
		        -- processes --
		        gate_process: process gate_process.impl;
		        terminal_process: process terminal_process.impl;
		        remote_controller_process: process remote_controller_process.impl;
		        
		        -- cpus --
		        terminal_cpu: processor Cortex_M0.impl;
		        remote_controller_cpu: processor Cortex_M0.impl;
		        
		        -- memory -- 
		        ram: memory ram.impl;
		        
		        -- radio bus --
		        radio: bus radio.impl;
			
		connections
				-- devices connections --
				c1: port engine.engine_state -> engine_controller.engine_state_in; -- engine tells controller its state
				c2: port engine_controller.engine_action -> engine.engine_action; -- controller tells engine what to do
				c3: port limit_switch_top.status -> engine_controller.switch_status_top; -- top limit switch tell controller its status
				c4: port limit_switch_bottom.status -> engine_controller.switch_status_bottom; -- bottom limit switch tell controller its status
				
				-- TODO: Połączenia między urządzeniami
				
				-- processes connections --
				c5: port gate_process.engine_state_out -> terminal_process.engine_state;
				c6: port terminal_process.engine_action -> gate_process.terminal_action;
				
				-- bus connections --
				c7: bus access terminal_controller.radio_bus_access <-> radio;
				c8: bus access remote_controller.radio_bus_access <-> radio;
				
				-- over radio connections --
				c9: port remote_controller.radio_dispatch -> terminal_controller.radio_receive;
				
		properties
			-- cpu bindings --
			Actual_Processor_Binding => (reference (terminal_cpu)) applies to gate_process;
			Actual_Processor_Binding => (reference (terminal_cpu)) applies to terminal_process;
			Actual_Processor_Binding => (reference (remote_controller_cpu)) applies to remote_controller_process;
			
			-- ram bindings --
			Actual_Memory_Binding => (reference(ram)) applies to terminal_cpu;
			Actual_Memory_Binding => (reference(ram)) applies to remote_controller_cpu;
				
	end garade_door_system.impl;
	
	-- Gate process --
			
	process gate_process
		features
			engine_state_out: out data port EngineState;
			terminal_action: in data port EngineAction;
	end gate_process;
	
	process implementation gate_process.impl
	    subcomponents
	    	limit_switch_thread: thread limit_switch_thread.impl;
	    	engine_thread: thread engine_thread.impl;
	    	engine_controller_thread: thread engine_controller_thread.impl;
	    connections
	    	c1: port limit_switch_thread.status_top -> engine_controller_thread.switch_top_status;
	    	c2: port limit_switch_thread.status_bottom -> engine_controller_thread.switch_bottom_status;
	    	c3: port engine_thread.engine_state -> engine_controller_thread.engine_state_in;
	    	c4: port engine_controller_thread.engine_action -> engine_thread.engine_action;
	    	c5: port engine_controller_thread.engine_state_out -> engine_state_out;
	    	c6: port terminal_action -> engine_controller_thread.terminal_action;
	    	
	end gate_process.impl;
			
	-- Gate threads --
	
	thread engine_thread
		features
			engine_action: in data port EngineAction;
			engine_state: out data port EngineState;
		properties
			Period => 20ms;
			Dispatch_Protocol => Periodic;
	end engine_thread;
	
	thread implementation engine_thread.impl	
	end engine_thread.impl;
	
	thread engine_controller_thread
		features
			switch_top_status: in data port Base_Types::Boolean; -- top limit switch
			switch_bottom_status: in data port Base_Types::Boolean; -- bottom limit switch
			terminal_action: in data port EngineAction; -- termianl tells controller what to do
			engine_action: out data port EngineAction; -- what the engine should do
			engine_state_in: in data port EngineState; -- actual engine state
			engine_state_out: out data port EngineState; -- engine state from controller's pov
		properties
			Period => 20ms;
        	Dispatch_Protocol => Periodic;
	end engine_controller_thread;
	
	thread implementation engine_controller_thread.impl
	end engine_controller_thread.impl;
			
	thread limit_switch_thread
		features
			status_top: out data port Base_Types::Boolean;
        	status_bottom: out data port Base_Types::Boolean;
    properties
        Period => 20ms;
        Dispatch_Protocol => Periodic;
	end limit_switch_thread;
	
	thread implementation limit_switch_thread.impl
	end limit_switch_thread.impl;
				
	-- Gate devices --
			
	device engine_device
		features
			engine_action: in data port EngineAction;
			engine_state: out data port EngineState;
		properties
			Period => 20ms;
			Dispatch_Protocol => Periodic;
	end engine_device;
	
	device implementation engine_device.impl
	end engine_device.impl;
	
	device engine_controller_device
		features
			switch_status_top: in data port Base_Types::Boolean; -- top limit switch
			switch_status_bottom: in data port Base_Types::Boolean; -- bottom limit switch
			engine_action: out data port EngineAction; -- action to perform
			engine_state_in: in data port EngineState; -- actual engine state
			engine_state_out: out data port EngineState; -- engine state from controller's pov
		properties
			Period => 20ms;
			Dispatch_Protocol => Periodic;			
	end engine_controller_device;
	
	device implementation engine_controller_device.impl
	end engine_controller_device.impl;
	
	device limit_switch_device
		features
			status: out data port Base_Types::Boolean; -- true -> active, false -> inactive
		properties
			Period => 20ms;
			Dispatch_Protocol => Periodic;
	end limit_switch_device;
	
	device implementation limit_switch_device.impl
	end limit_switch_device.impl;
	
	-- Terminal process --
	
	process terminal_process
		features
			engine_action: out data port EngineAction;
			engine_state: in data port EngineState;
			
			-- data over radio --
			radio_receive: in data port EngineAction;
	end terminal_process;
	
	process implementation terminal_process.impl
		subcomponents
			button_thread: thread button_thread.impl;
			lcd_display_thread: thread lcd_display_thread.impl;
			terminal_controller_thread: thread terminal_controller_thread.impl;
		connections
			c1: port button_thread.button_up_status -> terminal_controller_thread.button_up_status;
			c2: port button_thread.button_down_status -> terminal_controller_thread.button_down_status;
			c3: port terminal_controller_thread.lcd_status -> lcd_display_thread.status;
			c4: port engine_state -> terminal_controller_thread.engine_state;
			c5: port terminal_controller_thread.engine_action -> engine_action;
			c6: port radio_receive ->  terminal_controller_thread.radio_receive;
			
	end terminal_process.impl;
	
	-- Terminal threads --
	
	thread button_thread
		features
			button_up_status: out data port Base_Types::Boolean;
			button_down_status: out data port Base_Types::Boolean;
		properties
			Period => 20ms;
			Dispatch_Protocol => Periodic;	
	end button_thread;
	
	thread implementation button_thread.impl	
	end button_thread.impl;
	
	thread lcd_display_thread
		features
			status: in data port EngineState; 
		properties 
			Period => 20ms;
			Dispatch_Protocol => Periodic;	
	end lcd_display_thread;
	
	thread implementation lcd_display_thread.impl	
	end lcd_display_thread.impl;
	
	thread terminal_controller_thread
		features
			button_up_status: in data port Base_Types::Boolean;
			button_down_status: in data port Base_Types::Boolean;
			lcd_status: out data port EngineState;
			engine_state: in data port EngineState; -- data from engine controller
			engine_action: out data port EngineAction; -- data to engine controller
			
			-- data over radio --
			radio_receive: in data port EngineAction;
		properties 
			Period => 20ms;
			Dispatch_Protocol => Periodic;
	end terminal_controller_thread;
	
	thread implementation terminal_controller_thread.impl
	end terminal_controller_thread.impl;	
	
	-- Terminal devices --
	
	device button_device
		features
			status: out data port Base_Types::Boolean;
		properties
			Period => 20ms;
			Dispatch_Protocol => Periodic;	
	end button_device;
	
	device implementation button_device.impl
	end button_device.impl;
	
	device lcd_display_device
		features
			status: in data port EngineState; 
		properties 
			Period => 20ms;
			Dispatch_Protocol => Periodic;	
	end lcd_display_device;
	
	device implementation lcd_display_device.impl
	end lcd_display_device.impl;
	
	device terminal_controller_device
		features
			-- based on button_status_up, button_status_down and command controller determines engine_action --
			button_status_up: in data port Base_Types::Boolean;
			button_status_down: in data port Base_Types::Boolean;
			lcd_status: out data port EngineState;
			engine_state: in data port EngineState; -- data from engine controller
			engine_action: out data port EngineAction; -- data to engine controller
			
			-- data over radio --
			radio_bus_access: requires bus access radio;
			radio_receive: in data port EngineAction;
		properties 
			Period => 20ms;
			Dispatch_Protocol => Periodic;
	end terminal_controller_device;
	
	device implementation terminal_controller_device.impl
	end terminal_controller_device.impl;
	
	-- Remote process -- 
	
	process remote_controller_process
		features
			-- data over radio --
			radio_dispatch: out data port EngineAction;
	end remote_controller_process;

	process implementation remote_controller_process.impl
		subcomponents
			button_thread: thread button_thread.impl;
			remote_controller_thread: thread remote_controller_thread.impl;
		connections
			c1: port button_thread.button_up_status -> remote_controller_thread.button_up_status;
			c2: port button_thread.button_down_status -> remote_controller_thread.button_down_status;
			c3: port remote_controller_thread.radio_dispatch -> radio_dispatch;
			
	end remote_controller_process.impl;
	
	-- Remote threads -- 
	
	thread remote_controller_thread
		features
			button_up_status: in data port Base_Types::Boolean;
			button_down_status: in data port Base_Types::Boolean;
			
			-- data over radio --
			radio_dispatch: out data port EngineAction;
		properties 
			Period => 20ms;
			Dispatch_Protocol => Periodic;
	end remote_controller_thread;
	
	thread implementation remote_controller_thread.impl	
	end remote_controller_thread.impl;
	
	-- Remote devices -- 
	
	device remote_controller_device
		features
			button_status_up: in data port Base_Types::Boolean;
			button_status_down: in data port Base_Types::Boolean;
			
			-- data over radio --
			radio_bus_access: requires bus access radio;
			radio_dispatch: out data port EngineAction;
			
		properties 
			Period => 20ms;
			Dispatch_Protocol => Periodic;
	end remote_controller_device;
	
	device implementation remote_controller_device.impl
	end remote_controller_device.impl;
	
	-- processor --
	
	processor Cortex_M0
	end Cortex_M0;
	
	processor implementation Cortex_M0.impl
	end Cortex_M0.impl;
	
	-- ram --
	
	memory ram
	end ram;
	
	memory implementation ram.impl
	end ram.impl;
	
	-- radio bus --
	
	bus radio
	end radio;
	
	bus implementation radio.impl
	end radio.impl;
   	
	
end garage;